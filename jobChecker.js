const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const { translateWithGoogle, cleanHtml } = require('./translator');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ Jobicy API
async function checkNewJobs(db, bot, JOB_CHANNEL_ID, MAX_ITEMS_PER_RUN) {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ Jobicy API...');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ Jobicy API
    const jobsResponse = await fetch('https://jobicy.com/api/v2/remote-jobs?count=20');
    
    if (!jobsResponse.ok) {
      throw new Error(`Jobicy API error: ${jobsResponse.status}`);
    }
    
    const contentType = jobsResponse.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
      const responseText = await jobsResponse.text();
      throw new Error(`Unexpected content type: ${contentType}. Response: ${responseText.substring(0, 200)}`);
    }
    
    const jobsData = await jobsResponse.json();
    
    if (!jobsData || !jobsData.jobs || !Array.isArray(jobsData.jobs)) {
      throw new Error('Invalid response structure from Jobicy API');
    }
    
    const newJobs = jobsData.jobs;
    let newJobsCount = 0;
    
    for (const job of newJobs) {
      try {
        const alreadyPosted = await db.isJobPosted(job.id);
        if (alreadyPosted) {
          continue;
        }
        
        console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é #${job.id}: ${job.jobTitle}`);
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å –ø–æ–º–æ—â—å—é Google Translate
        const translatedTitle = await translateWithGoogle(cleanHtml(job.jobTitle || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'));
        const translatedCompany = await translateWithGoogle(cleanHtml(job.companyName || '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'));
        const translatedType = await translateWithGoogle(cleanHtml(job.jobType || '–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω'));
        const translatedIndustry = await translateWithGoogle(cleanHtml(job.industry || ''));
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = `üíº *${translatedTitle}*\n`;
        message += `üè¢ ${translatedCompany}\n`;
        message += `üïí ${translatedType}\n`;
        message += `üåç –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n`;
        
        if (translatedIndustry) {
          message += `üè≠ ${translatedIndustry}\n`;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null/undefined –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º
        let jobDescription = '';
        if (job.jobDescription && typeof job.jobDescription === 'string') {
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è, –æ—á–∏—â–∞–µ–º HTML –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º
          const cleanDescription = cleanHtml(job.jobDescription);
          const translatedDescription = await translateWithGoogle(cleanDescription);
          jobDescription = translatedDescription.substring(0,0);
        } else {
          jobDescription = '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
        }
        
        message += `\n${jobDescription}...\n\n`;
        message += `‚Äî‚Äî\n`;
        message += `[–ü–æ–¥—Ä–æ–±–Ω–µ–µ](${job.url || '–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'})\n`;
        message += `[–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏](https://t.me/your_job_channel)`;
        
        if (JOB_CHANNEL_ID) {
          await bot.api.sendMessage(JOB_CHANNEL_ID, message, {
            parse_mode: "Markdown",
            disable_web_page_preview: true
          });
          
          console.log(`–í–∞–∫–∞–Ω—Å–∏—è #${job.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª!`);
          await db.markJobAsPosted(job.id, job.jobTitle || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
          await db.updateStatistics(JOB_CHANNEL_ID);
          newJobsCount++;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
          if (newJobsCount >= MAX_ITEMS_PER_RUN) {
            console.log(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ ${MAX_ITEMS_PER_RUN} –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫`);
            break;
          }
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π (—É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 20 —Å–µ–∫—É–Ω–¥)
          await new Promise(resolve => setTimeout(resolve, 20000));
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ #${job.id}:`, error);
      }
    }
    
    if (newJobsCount > 0) {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: ${newJobsCount}`);
    } else {
      console.log('–ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:', error);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å API
    if (process.env.OWNER_ID) {
      try {
        await bot.api.sendMessage(process.env.OWNER_ID, `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: ${error.message}`);
      } catch (sendError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É:', sendError);
      }
    }
  }
}

module.exports = {
  checkNewJobs
};