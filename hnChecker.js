const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const { getOpenAIClient } = require('./utils');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π
async function getAISummary(articleUrl, apiKeys, currentKeyIndex) {
  const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç—å—é –ø–æ —Å—Å—ã–ª–∫–µ: ${articleUrl}

–°–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏, –±—É–¥–µ—Ç –ª–∏ —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π IT-–∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ –†–æ—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞–Ω–∞—Ö –°–ù–ì.
–ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è —ç—Ç–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞—Å–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ –°–®–ê, –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ IT, –∏–ª–∏ —Ç–µ–º–∞ —É–∂–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –¥–ª—è –Ω–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏), –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ "0".

–ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞, —Å–æ–∑–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –≤—ã–∂–∏–º–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ 350 —Å–ª–æ–≤) –¥–ª—è IT-–∫–∞–Ω–∞–ª–∞ –≤ Telegram.

–ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤—ã–∂–∏–º–∫–µ:
1. –°—Ç–∏–ª—å: –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –ø—Ä—è–º–æ–π ‚Äî –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
2. –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å —Å—É—Ç–∏, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
3. –í—ã–¥–µ–ª–∏ –≥–ª–∞–≤–Ω—É—é –∏–¥–µ—é –∏ 2-3 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏
4. –î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –∏–ª–∏ –∏–Ω—Å–∞–π—Ç—ã
5. –ò–∑–±–µ–≥–∞–π –º–∞—Ä–∫–¥–∞—É–Ω–∞ (*, _ –∏ –¥—Ä—É–≥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
6. –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —ç—Ç–æ –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –≤—ã–∂–∏–º–∫–∞ ‚Äî –ø–æ–¥–∞–≤–∞–π –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

–§–æ—Ä–º–∞—Ç –≤—ã–∂–∏–º–∫–∏:
- –Ø—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ç–µ–∑–∏—Å–∞–º–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥

–ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞.
  `;

  let retries = 0;
  const maxRetries = apiKeys.length;
  
  while (retries < maxRetries) {
    try {
      const openaiClient = getOpenAIClient(apiKeys, currentKeyIndex);
      const completion = await openaiClient.chat.completions.create({
        model: "deepseek/deepseek-chat-v3.1:free",
        messages: [{ 
          role: "user", 
          content: prompt 
        }],
        temperature: 0.7,
        max_tokens: 1000
      });
      
      return completion.choices[0].message.content;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–ª—é—á–∞ #${currentKeyIndex + 1}:`, error);
      
      if (error.status === 402 || error.status === 429) {
        retries++;
        currentKeyIndex = (currentKeyIndex + 1) % apiKeys.length;
        
        if (retries < maxRetries) {
          console.log(`–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á (#${currentKeyIndex + 1}). –ü–æ–ø—ã—Ç–∫–∞ ${retries + 1} –∏–∑ ${maxRetries}...`);
          await new Promise(resolve => setTimeout(resolve, 5000));
        } else {
          console.log('–í—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API.');
          return null;
        }
      } else {
        console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ OpenRouter API:', error);
        return null;
      }
    }
  }
  
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª—É—á—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
async function checkBestStories(db, bot, CHANNEL_ID, apiKeys, MAX_ITEMS_PER_RUN) {
  let currentKeyIndex = 0;
  
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—É—á—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...');
    
    const bestStoriesResponse = await fetch('https://hacker-news.firebaseio.com/v0/beststories.json');
    if (!bestStoriesResponse.ok) {
      throw new Error(`Hacker News API error: ${bestStoriesResponse.status}`);
    }
    
    const bestStoriesIds = await bestStoriesResponse.json();
    
    if (!Array.isArray(bestStoriesIds)) {
      throw new Error('Invalid response from Hacker News API: expected array');
    }
    
    const topStoriesIds = bestStoriesIds.slice(0, 30);
    let newStoriesCount = 0;
    
    for (const storyId of topStoriesIds) {
      if (newStoriesCount >= MAX_ITEMS_PER_RUN) {
        console.log(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ ${MAX_ITEMS_PER_RUN} –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫`);
        break;
      }
      
      try {
        const alreadyPosted = await db.isStoryPosted(storyId);
        if (alreadyPosted) {
          console.log(`–ù–æ–≤–æ—Å—Ç—å #${storyId} —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        
        const storyResponse = await fetch(`https://hacker-news.firebaseio.com/v0/item/${storyId}.json`);
        if (!storyResponse.ok) {
          throw new Error(`Hacker News item API error: ${storyResponse.status}`);
        }
        
        const story = await storyResponse.json();
        
        if (story && story.type === 'story' && story.url && story.title) {
          console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ª—É—á—à—É—é –Ω–æ–≤–æ—Å—Ç—å #${storyId}: ${story.title}`);
          
          const aiSummary = await getAISummary(story.url, apiKeys, currentKeyIndex);
          
          if (aiSummary) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç "0" (–Ω–æ–≤–æ—Å—Ç—å –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞)
            if (aiSummary.trim() === "0") {
              console.log(`–ù–æ–≤–æ—Å—Ç—å #${storyId} –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é, –Ω–æ –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º.`);
              await db.markStoryAsPosted(storyId, story.title);
              continue;
            }
            
            const domain = new URL(story.url).hostname.replace('www.', '');
            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ "–ò—Å—Ç–æ—á–Ω–∏–∫" –∏ "–û–±—Å—É–∂–¥–µ–Ω–∏–µ"
            const message = `üì∞ *${story.title}*\n\n${aiSummary}\n\n‚Äî‚Äî\n\n[–ò—Å—Ç–æ—á–Ω–∏–∫](${story.url})\n[–û–±—Å—É–∂–¥–µ–Ω–∏–µ](https://news.ycombinator.com/item?id=${storyId})\n\nüìù –ù–æ–≤–æ—Å—Ç–∏ –≤–∑—è—Ç—ã —Å Hacker News –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–º—ã—Å–ª–∞.\n\n[–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Hacker News](https://t.me/hackernewru)`;
            
            await bot.api.sendMessage(CHANNEL_ID, message, {
              parse_mode: "Markdown",
              disable_web_page_preview: false
            });
            
            console.log(`–ù–æ–≤–æ—Å—Ç—å #${storyId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª!`);
            await db.markStoryAsPosted(storyId, story.title);
            await db.updateStatistics(CHANNEL_ID);
            newStoriesCount++;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–æ 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 30000));
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ #${storyId}:`, error);
      }
    }
    
    if (newStoriesCount > 0) {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: ${newStoriesCount}`);
    } else {
      console.log('–ù–æ–≤—ã—Ö –ª—É—á—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª—É—á—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
  }
}

module.exports = {
  checkBestStories
};