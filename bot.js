require('dotenv').config();
const { Bot } = require("grammy");
const { OpenAI } = require("openai");
const sqlite3 = require('sqlite3').verbose();
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const bot = new Bot(process.env.BOT_TOKEN);
const CHANNEL_ID = process.env.CHANNEL_ID;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const OWNER_ID = process.env.OWNER_ID;

// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
const MAX_STORIES_PER_RUN = 3;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç –¥–ª—è OpenRouter
const openai = new OpenAI({
  baseURL: "https://openrouter.ai/api/v1",
  apiKey: OPENROUTER_API_KEY,
  defaultHeaders: {
    "HTTP-Referer": "https://your-telegram-bot.com",
    "X-Title": "Hacker News Digest Bot"
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
function isOwner(ctx) {
  return ctx.from && ctx.from.id === parseInt(OWNER_ID);
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
bot.use(async (ctx, next) => {
  if (ctx.message && !isOwner(ctx)) {
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from.id}`);
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.");
  }
  await next();
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
let db = new sqlite3.Database('./hn_bot.db', (err) => {
  if (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
  } else {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite DB.');
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    db.run(`CREATE TABLE IF NOT EXISTS posted_stories (
      id INTEGER PRIMARY KEY,
      story_id INTEGER NOT NULL UNIQUE,
      title TEXT,
      processed_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', err);
      } else {
        console.log('–¢–∞–±–ª–∏—Ü–∞ posted_stories —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
      }
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot.command("clear_db", async (ctx) => {
  if (!isOwner(ctx)) return;
  
  try {
    db.run("DELETE FROM posted_stories", function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î:', err);
        ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
      } else {
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', this.changes);
        ctx.reply("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞! –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–∞–Ω–æ–≤–æ.");
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã clear_db:', error);
    ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
bot.command("help", async (ctx) => {
  if (!isOwner(ctx)) return;
  
  const helpText = `
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥
/force_check - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
/clear_db - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π)
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π
/start_auto - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª—É—á—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å Hacker News –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∏—Ö –≤ –∫–∞–Ω–∞–ª.
  `;
  
  await ctx.reply(helpText);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª–∞ –ª–∏ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
function isStoryPosted(storyId) {
  return new Promise((resolve, reject) => {
    db.get("SELECT story_id FROM posted_stories WHERE story_id = ?", [storyId], (err, row) => {
      if (err) reject(err);
      resolve(!!row);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π
function markStoryAsPosted(storyId, title) {
  return new Promise((resolve, reject) => {
    db.run("INSERT INTO posted_stories (story_id, title) VALUES (?, ?)", [storyId, title], function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –ë–î:', err);
        reject(err);
      } else {
        console.log(`–ù–æ–≤–æ—Å—Ç—å #${storyId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î`);
        resolve();
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API
async function getAISummary(articleUrl) {
  const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç—å—é –ø–æ —Å—Å—ã–ª–∫–µ: ${articleUrl}

–°–æ–∑–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –≤—ã–∂–∏–º–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ 350 —Å–ª–æ–≤) –¥–ª—è IT-–∫–∞–Ω–∞–ª–∞ –≤ Telegram.

–ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –°—Ç–∏–ª—å: –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –ø—Ä—è–º–æ–π ‚Äî –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
2. –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å —Å—É—Ç–∏, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
3. –í—ã–¥–µ–ª–∏ –≥–ª–∞–≤–Ω—É—é –∏–¥–µ—é –∏ 2-3 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏
4. –î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –∏–ª–∏ –∏–Ω—Å–∞–π—Ç—ã
5. –ò–∑–±–µ–≥–∞–π –º–∞—Ä–∫–¥–∞—É–Ω–∞ (*, _ –∏ –¥—Ä—É–≥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
6. –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —ç—Ç–æ –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –≤—ã–∂–∏–º–∫–∞ ‚Äî –ø–æ–¥–∞–≤–∞–π –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç


–§–æ—Ä–º–∞—Ç:
- –Ø—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ç–µ–∑–∏—Å–∞–º–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥

–ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞.
`;

  try {
    const completion = await openai.chat.completions.create({
      model: "deepseek/deepseek-chat-v3.1:free",
      messages: [{ 
        role: "user", 
        content: prompt 
      }],
      temperature: 0.7,
      max_tokens: 1000
    });
    
    return completion.choices[0].message.content;
  } catch (error) {
    console.error('OpenRouter API Error:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª—É—á—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
async function checkBestStories() {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—É—á—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...');
    
    const bestStoriesResponse = await fetch('https://hacker-news.firebaseio.com/v0/beststories.json');
    const bestStoriesIds = await bestStoriesResponse.json();
    
    const topStoriesIds = bestStoriesIds.slice(0, 30);
    let newStoriesCount = 0;
    
    for (const storyId of topStoriesIds) {
      if (newStoriesCount >= MAX_STORIES_PER_RUN) {
        console.log(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ ${MAX_STORIES_PER_RUN} –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫`);
        break;
      }
      
      try {
        const alreadyPosted = await isStoryPosted(storyId);
        if (alreadyPosted) {
          console.log(`–ù–æ–≤–æ—Å—Ç—å #${storyId} —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        
        const storyResponse = await fetch(`https://hacker-news.firebaseio.com/v0/item/${storyId}.json`);
        const story = await storyResponse.json();
        
        if (story && story.type === 'story' && story.url && story.title) {
          console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ª—É—á—à—É—é –Ω–æ–≤–æ—Å—Ç—å #${storyId}: ${story.title}`);
          
          const aiSummary = await getAISummary(story.url);
          
          if (aiSummary) {
            const domain = new URL(story.url).hostname.replace('www.', '');
            const message = `üì∞ *${story.title}*\n\n${aiSummary}\n\n‚Äî‚Äî\n[–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Hacker News](https://t.me/hackernewru)\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${domain}\nüí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ: https://news.ycombinator.com/item?id=${storyId}\n\nüìù –ù–æ–≤–æ—Å—Ç–∏ –≤–∑—è—Ç—ã —Å Hacker News –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–º—ã—Å–ª–∞.`;
            
            await bot.api.sendMessage(CHANNEL_ID, message, {
              parse_mode: "Markdown",
              disable_web_page_preview: false
            });
            
            console.log(`–ù–æ–≤–æ—Å—Ç—å #${storyId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª!`);
            await markStoryAsPosted(storyId, story.title);
            newStoriesCount++;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–æ 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 30000));
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ #${storyId}:`, error);
      }
    }
    
    if (newStoriesCount > 0) {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: ${newStoriesCount}`);
    } else {
      console.log('–ù–æ–≤—ã—Ö –ª—É—á—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª—É—á—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
  }
}