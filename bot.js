require('dotenv').config();
const { Bot } = require("grammy");
const os = require('os');
const { exec } = require('child_process');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
const config = require('./config');
const Database = require('./database');
const { checkBestStories } = require('./hnChecker');
const { checkNewJobs } = require('./jobChecker');
const { getCpuTemperature } = require('./utils');

const bot = new Bot(config.BOT_TOKEN);
const db = new Database();

let currentKeyIndex = 0;
let newsCheckerInterval, jobCheckerInterval;
let isNewsChecking = false;
let isJobsChecking = false;

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
function isOwner(ctx) {
  return ctx.from && ctx.from.id === parseInt(config.OWNER_ID);
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
bot.use(async (ctx, next) => {
  if (ctx.message && !isOwner(ctx)) {
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from.id}`);
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.");
  }
  await next();
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot.command("clear_db", async (ctx) => {
  if (!isOwner(ctx)) return;
  
  try {
    db.db.run("DELETE FROM posted_stories", function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î –Ω–æ–≤–æ—Å—Ç–µ–π:', err);
        ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π");
      } else {
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', this.changes);
        ctx.reply(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${this.changes}`);
      }
    });
    
    db.db.run("DELETE FROM posted_jobs", function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î –≤–∞–∫–∞–Ω—Å–∏–π:', err);
      } else {
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', this.changes);
        ctx.reply(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${this.changes}`);
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã clear_db:', error);
    ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
bot.command("help", async (ctx) => {
  if (!isOwner(ctx)) return;
  
  const helpText = `
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥
/force_check - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–º–∞–∫—Å. 3)
/force_jobs - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–º–∞–∫—Å. 3)
/clear_db - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∫–∞–Ω—Å–∏–π)
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∫–∞–Ω—Å–∏–π
/start_auto - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∫–∞–Ω—Å–∏–π
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/server - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
  `;
  
  await ctx.reply(helpText);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª—É—á—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
function startNewsChecker() {
  if (newsCheckerInterval) {
    clearInterval(newsCheckerInterval);
  }
  
  newsCheckerInterval = setInterval(async () => {
    if (isNewsChecking) {
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }
    
    isNewsChecking = true;
    try {
      await checkBestStories(db, bot, config.CHANNEL_ID, config.OPENROUTER_API_KEYS, config.MAX_ITEMS_PER_RUN);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
    } finally {
      isNewsChecking = false;
    }
  }, config.CHECK_INTERVAL);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
function startJobChecker() {
  if (jobCheckerInterval) {
    clearInterval(jobCheckerInterval);
  }
  
  jobCheckerInterval = setInterval(async () => {
    if (isJobsChecking) {
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }
    
    isJobsChecking = true;
    try {
      await checkNewJobs(db, bot, config.JOB_CHANNEL_ID, config.MAX_ITEMS_PER_RUN);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
    } finally {
      isJobsChecking = false;
    }
  }, config.CHECK_INTERVAL);
}

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∫–∞–Ω—Å–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç.');

// –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command("start", async (ctx) => {
  if (!isOwner(ctx)) return;
  await ctx.reply("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª—É—á—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ Hacker News –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.");
});

bot.command("force_check", async (ctx) => {
  if (!isOwner(ctx)) return;
  
  if (isNewsChecking) {
    return ctx.reply("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.");
  }
  
  await ctx.reply("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª—É—á—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–º–∞–∫—Å. 3)...");
  isNewsChecking = true;
  try {
    await checkBestStories(db, bot, config.CHANNEL_ID, config.OPENROUTER_API_KEYS, config.MAX_ITEMS_PER_RUN);
    await ctx.reply("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π");
  } finally {
    isNewsChecking = false;
  }
});

bot.command("force_jobs", async (ctx) => {
  if (!isOwner(ctx)) return;
  
  if (isJobsChecking) {
    return ctx.reply("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.");
  }
  
  await ctx.reply("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π (–º–∞–∫—Å. 3)...");
  isJobsChecking = true;
  try {
    await checkNewJobs(db, bot, config.JOB_CHANNEL_ID, config.MAX_ITEMS_PER_RUN);
    await ctx.reply("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π");
  } finally {
    isJobsChecking = false;
  }
});

bot.command("stop", async (ctx) => {
  if (!isOwner(ctx)) return;
  clearInterval(newsCheckerInterval);
  clearInterval(jobCheckerInterval);
  newsCheckerInterval = null;
  jobCheckerInterval = null;
  await ctx.reply("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
});

bot.command("start_auto", async (ctx) => {
  if (!isOwner(ctx)) return;
  startNewsChecker();
  startJobChecker();
  await ctx.reply("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–ø—É—â–µ–Ω–∞.");
});

bot.command("stats", async (ctx) => {
  if (!isOwner(ctx)) return;
  
  try {
    const today = new Date().toISOString().split('T')[0];
    
    const stats = await new Promise((resolve, reject) => {
      db.db.all(`
        SELECT channel_id, posts_count 
        FROM statistics 
        WHERE date = ?
      `, [today], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
    
    let statsText = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n";
    
    if (stats.length === 0) {
      statsText += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.";
    } else {
      for (const stat of stats) {
        const channelName = stat.channel_id === config.CHANNEL_ID ? "Hacker News" : 
                           (stat.channel_id === config.JOB_CHANNEL_ID ? "–í–∞–∫–∞–Ω—Å–∏–∏" : stat.channel_id);
        statsText += `‚Ä¢ ${channelName}: ${stat.posts_count} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n`;
      }
    }
    
    await ctx.reply(statsText);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
  }
});

bot.command("server", async (ctx) => {
  if (!isOwner(ctx)) return;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CPU
    const cpus = os.cpus();
    const cpuLoad = cpus.map(cpu => {
      const total = Object.values(cpu.times).reduce((acc, tv) => acc + tv, 0);
      const usage = total - cpu.times.idle;
      return Math.round(usage / total * 100);
    });
    
    const avgCpuLoad = cpuLoad.reduce((acc, load) => acc + load, 0) / cpuLoad.length;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
    const totalMem = os.totalmem();
    const freeMem = os.freemem();
    const usedMem = totalMem - freeMem;
    const memUsage = Math.round((usedMem / totalMem) * 100);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let serverInfo = "üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:\n\n";
    serverInfo += `CPU: ${avgCpuLoad.toFixed(1)}% –∑–∞–≥—Ä—É–∑–∫–∞\n`;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU
    try {
      const cpuTemp = await getCpuTemperature();
      if (cpuTemp !== 'N/A') {
        serverInfo += `üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: ${cpuTemp}\n`;
      }
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU:', e);
    }
    
    serverInfo += `–ü–∞–º—è—Ç—å: ${memUsage}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\n`;
    
    await ctx.reply(serverInfo);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ:', error);
    ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ");
  }
});

bot.start().then(() => {
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  startNewsChecker();
  startJobChecker();
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  setTimeout(() => {
    if (!isNewsChecking) {
      isNewsChecking = true;
      checkBestStories(db, bot, config.CHANNEL_ID, config.OPENROUTER_API_KEYS, config.MAX_ITEMS_PER_RUN)
        .finally(() => {
          isNewsChecking = false;
        });
    }
  }, 5000);
  
  setTimeout(() => {
    if (!isJobsChecking) {
      isJobsChecking = true;
      checkNewJobs(db, bot, config.JOB_CHANNEL_ID, config.MAX_ITEMS_PER_RUN)
        .finally(() => {
          isJobsChecking = false;
        });
    }
  }, 15000);
});

bot.catch((err) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
});